// <auto-generated />
using System;
using JokesAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JokesAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240303183832_AddJokeTickets")]
    partial class AddJokeTickets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JokesAPI.Models.Joke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Jokes");
                });

            modelBuilder.Entity("JokesAPI.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.Property<int>("TycketTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("JokeId");

                    b.HasIndex("TycketTypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("JokesAPI.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("JokesAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JokesAPI.Models.UserUpvote", b =>
                {
                    b.Property<int>("UpvoterId")
                        .HasColumnType("int");

                    b.Property<int>("UpvotedUserId")
                        .HasColumnType("int");

                    b.HasKey("UpvoterId", "UpvotedUserId");

                    b.HasIndex("UpvotedUserId");

                    b.ToTable("UsersUpvote");
                });

            modelBuilder.Entity("JokesAPI.Models.Joke", b =>
                {
                    b.HasOne("JokesAPI.Models.User", "Author")
                        .WithMany("Jokes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("JokesAPI.Models.Ticket", b =>
                {
                    b.HasOne("JokesAPI.Models.Joke", "Joke")
                        .WithMany("Tickets")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JokesAPI.Models.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TycketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Joke");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("JokesAPI.Models.UserUpvote", b =>
                {
                    b.HasOne("JokesAPI.Models.User", "UpvotedUser")
                        .WithMany("Upvoters")
                        .HasForeignKey("UpvotedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JokesAPI.Models.User", "Upvoter")
                        .WithMany("UpvotedUsers")
                        .HasForeignKey("UpvoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpvotedUser");

                    b.Navigation("Upvoter");
                });

            modelBuilder.Entity("JokesAPI.Models.Joke", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("JokesAPI.Models.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("JokesAPI.Models.User", b =>
                {
                    b.Navigation("Jokes");

                    b.Navigation("UpvotedUsers");

                    b.Navigation("Upvoters");
                });
#pragma warning restore 612, 618
        }
    }
}
